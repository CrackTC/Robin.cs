// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Robin.Extensions.Gemini.CompiledModels
{
    public partial class GeminiDbContextModel
    {
        partial void Initialize()
        {
            var message = MessageEntityType.Create(this);
            var user = UserEntityType.Create(this);

            MessageEntityType.CreateForeignKey1(message, user);

            MessageEntityType.CreateAnnotations(message);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("ProductVersion", "8.0.4");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var message = FindEntityType("Robin.Extensions.Gemini.Message")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            message.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var robinExtensionsGeminiMessageTableBase = new TableBase("Robin.Extensions.Gemini.Message", null, relationalModel);
            var contentColumnBase = new ColumnBase<ColumnMappingBase>("Content", "TEXT", robinExtensionsGeminiMessageTableBase);
            robinExtensionsGeminiMessageTableBase.Columns.Add("Content", contentColumnBase);
            var messageIdColumnBase = new ColumnBase<ColumnMappingBase>("MessageId", "INTEGER", robinExtensionsGeminiMessageTableBase);
            robinExtensionsGeminiMessageTableBase.Columns.Add("MessageId", messageIdColumnBase);
            var roleColumnBase = new ColumnBase<ColumnMappingBase>("Role", "INTEGER", robinExtensionsGeminiMessageTableBase);
            robinExtensionsGeminiMessageTableBase.Columns.Add("Role", roleColumnBase);
            var timestampColumnBase = new ColumnBase<ColumnMappingBase>("Timestamp", "INTEGER", robinExtensionsGeminiMessageTableBase);
            robinExtensionsGeminiMessageTableBase.Columns.Add("Timestamp", timestampColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "INTEGER", robinExtensionsGeminiMessageTableBase);
            robinExtensionsGeminiMessageTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Robin.Extensions.Gemini.Message", robinExtensionsGeminiMessageTableBase);
            var robinExtensionsGeminiMessageMappingBase = new TableMappingBase<ColumnMappingBase>(message, robinExtensionsGeminiMessageTableBase, true);
            robinExtensionsGeminiMessageTableBase.AddTypeMapping(robinExtensionsGeminiMessageMappingBase, false);
            defaultTableMappings.Add(robinExtensionsGeminiMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageIdColumnBase, message.FindProperty("MessageId")!, robinExtensionsGeminiMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase, message.FindProperty("Content")!, robinExtensionsGeminiMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleColumnBase, message.FindProperty("Role")!, robinExtensionsGeminiMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timestampColumnBase, message.FindProperty("Timestamp")!, robinExtensionsGeminiMessageMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, message.FindProperty("UserId")!, robinExtensionsGeminiMessageMappingBase);

            var tableMappings = new List<TableMapping>();
            message.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var messagesTable = new Table("Messages", null, relationalModel);
            var messageIdColumn = new Column("MessageId", "INTEGER", messagesTable);
            messagesTable.Columns.Add("MessageId", messageIdColumn);
            var contentColumn = new Column("Content", "TEXT", messagesTable);
            messagesTable.Columns.Add("Content", contentColumn);
            var roleColumn = new Column("Role", "INTEGER", messagesTable);
            messagesTable.Columns.Add("Role", roleColumn);
            var timestampColumn = new Column("Timestamp", "INTEGER", messagesTable);
            messagesTable.Columns.Add("Timestamp", timestampColumn);
            var userIdColumn = new Column("UserId", "INTEGER", messagesTable);
            messagesTable.Columns.Add("UserId", userIdColumn);
            var pK_Messages = new UniqueConstraint("PK_Messages", messagesTable, new[] { messageIdColumn });
            messagesTable.PrimaryKey = pK_Messages;
            var pK_MessagesUc = RelationalModel.GetKey(this,
                "Robin.Extensions.Gemini.Message",
                new[] { "MessageId" });
            pK_Messages.MappedKeys.Add(pK_MessagesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MessagesUc).Add(pK_Messages);
            messagesTable.UniqueConstraints.Add("PK_Messages", pK_Messages);
            var iX_Messages_UserId = new TableIndex(
            "IX_Messages_UserId", messagesTable, new[] { userIdColumn }, false);
            var iX_Messages_UserIdIx = RelationalModel.GetIndex(this,
                "Robin.Extensions.Gemini.Message",
                new[] { "UserId" });
            iX_Messages_UserId.MappedIndexes.Add(iX_Messages_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Messages_UserIdIx).Add(iX_Messages_UserId);
            messagesTable.Indexes.Add("IX_Messages_UserId", iX_Messages_UserId);
            relationalModel.Tables.Add(("Messages", null), messagesTable);
            var messagesTableMapping = new TableMapping(message, messagesTable, true);
            messagesTable.AddTypeMapping(messagesTableMapping, false);
            tableMappings.Add(messagesTableMapping);
            RelationalModel.CreateColumnMapping(messageIdColumn, message.FindProperty("MessageId")!, messagesTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn, message.FindProperty("Content")!, messagesTableMapping);
            RelationalModel.CreateColumnMapping(roleColumn, message.FindProperty("Role")!, messagesTableMapping);
            RelationalModel.CreateColumnMapping(timestampColumn, message.FindProperty("Timestamp")!, messagesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, message.FindProperty("UserId")!, messagesTableMapping);

            var user = FindEntityType("Robin.Extensions.Gemini.User")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var robinExtensionsGeminiUserTableBase = new TableBase("Robin.Extensions.Gemini.User", null, relationalModel);
            var modelNameColumnBase = new ColumnBase<ColumnMappingBase>("ModelName", "TEXT", robinExtensionsGeminiUserTableBase);
            robinExtensionsGeminiUserTableBase.Columns.Add("ModelName", modelNameColumnBase);
            var systemCommandColumnBase = new ColumnBase<ColumnMappingBase>("SystemCommand", "TEXT", robinExtensionsGeminiUserTableBase);
            robinExtensionsGeminiUserTableBase.Columns.Add("SystemCommand", systemCommandColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "INTEGER", robinExtensionsGeminiUserTableBase);
            robinExtensionsGeminiUserTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("Robin.Extensions.Gemini.User", robinExtensionsGeminiUserTableBase);
            var robinExtensionsGeminiUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, robinExtensionsGeminiUserTableBase, true);
            robinExtensionsGeminiUserTableBase.AddTypeMapping(robinExtensionsGeminiUserMappingBase, false);
            defaultTableMappings0.Add(robinExtensionsGeminiUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, user.FindProperty("UserId")!, robinExtensionsGeminiUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modelNameColumnBase, user.FindProperty("ModelName")!, robinExtensionsGeminiUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)systemCommandColumnBase, user.FindProperty("SystemCommand")!, robinExtensionsGeminiUserMappingBase);

            var tableMappings0 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var usersTable = new Table("Users", null, relationalModel);
            var userIdColumn0 = new Column("UserId", "INTEGER", usersTable);
            usersTable.Columns.Add("UserId", userIdColumn0);
            var modelNameColumn = new Column("ModelName", "TEXT", usersTable);
            usersTable.Columns.Add("ModelName", modelNameColumn);
            var systemCommandColumn = new Column("SystemCommand", "TEXT", usersTable);
            usersTable.Columns.Add("SystemCommand", systemCommandColumn);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { userIdColumn0 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "Robin.Extensions.Gemini.User",
                new[] { "UserId" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(user, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings0.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, user.FindProperty("UserId")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(modelNameColumn, user.FindProperty("ModelName")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(systemCommandColumn, user.FindProperty("SystemCommand")!, usersTableMapping);
            var fK_Messages_Users_UserId = new ForeignKeyConstraint(
                "FK_Messages_Users_UserId", messagesTable, usersTable,
                new[] { userIdColumn },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_Messages_Users_UserIdFk = RelationalModel.GetForeignKey(this,
                "Robin.Extensions.Gemini.Message",
                new[] { "UserId" },
                "Robin.Extensions.Gemini.User",
                new[] { "UserId" });
            fK_Messages_Users_UserId.MappedForeignKeys.Add(fK_Messages_Users_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Messages_Users_UserIdFk).Add(fK_Messages_Users_UserId);
            messagesTable.ForeignKeyConstraints.Add(fK_Messages_Users_UserId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Messages_Users_UserId);
            return relationalModel.MakeReadOnly();
        }
    }
}
